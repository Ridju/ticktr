// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: tickets.sql

package db

import (
	"context"
	"time"
)

const createTicket = `-- name: CreateTicket :one
INSERT INTO tickets(
    title,
    description,
    assigned_to,
    created_by,
    due_date
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, title, description, assigned_to, created_by, due_date, created_at
`

type CreateTicketParams struct {
	Title       string    `db:"title" json:"title"`
	Description string    `db:"description" json:"description"`
	AssignedTo  int64     `db:"assigned_to" json:"assigned_to"`
	CreatedBy   int64     `db:"created_by" json:"created_by"`
	DueDate     time.Time `db:"due_date" json:"due_date"`
}

func (q *Queries) CreateTicket(ctx context.Context, arg CreateTicketParams) (Ticket, error) {
	row := q.db.QueryRowContext(ctx, createTicket,
		arg.Title,
		arg.Description,
		arg.AssignedTo,
		arg.CreatedBy,
		arg.DueDate,
	)
	var i Ticket
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.AssignedTo,
		&i.CreatedBy,
		&i.DueDate,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTicket = `-- name: DeleteTicket :exec
DELETE FROM tickets 
WHERE id = $1
`

func (q *Queries) DeleteTicket(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTicket, id)
	return err
}

const getTicketByID = `-- name: GetTicketByID :one
SELECT id, title, description, assigned_to, created_by, due_date, created_at FROM tickets 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTicketByID(ctx context.Context, id int64) (Ticket, error) {
	row := q.db.QueryRowContext(ctx, getTicketByID, id)
	var i Ticket
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.AssignedTo,
		&i.CreatedBy,
		&i.DueDate,
		&i.CreatedAt,
	)
	return i, err
}

const getTicketForUpdate = `-- name: GetTicketForUpdate :one
SELECT id, title, description, assigned_to, created_by, due_date, created_at FROM tickets 
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetTicketForUpdate(ctx context.Context, id int64) (Ticket, error) {
	row := q.db.QueryRowContext(ctx, getTicketForUpdate, id)
	var i Ticket
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.AssignedTo,
		&i.CreatedBy,
		&i.DueDate,
		&i.CreatedAt,
	)
	return i, err
}

const listTickets = `-- name: ListTickets :many
SELECT id, title, description, assigned_to, created_by, due_date, created_at FROM tickets 
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListTicketsParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) ListTickets(ctx context.Context, arg ListTicketsParams) ([]Ticket, error) {
	rows, err := q.db.QueryContext(ctx, listTickets, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Ticket{}
	for rows.Next() {
		var i Ticket
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.AssignedTo,
			&i.CreatedBy,
			&i.DueDate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTicketsByUser = `-- name: ListTicketsByUser :many
SELECT id, title, description, assigned_to, created_by, due_date, created_at FROM tickets 
WHERE created_by = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListTicketsByUserParams struct {
	CreatedBy int64 `db:"created_by" json:"created_by"`
	Limit     int32 `db:"limit" json:"limit"`
	Offset    int32 `db:"offset" json:"offset"`
}

func (q *Queries) ListTicketsByUser(ctx context.Context, arg ListTicketsByUserParams) ([]Ticket, error) {
	rows, err := q.db.QueryContext(ctx, listTicketsByUser, arg.CreatedBy, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Ticket{}
	for rows.Next() {
		var i Ticket
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.AssignedTo,
			&i.CreatedBy,
			&i.DueDate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTicketsForUser = `-- name: ListTicketsForUser :many
SELECT id, title, description, assigned_to, created_by, due_date, created_at FROM tickets 
WHERE assigned_to = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListTicketsForUserParams struct {
	AssignedTo int64 `db:"assigned_to" json:"assigned_to"`
	Limit      int32 `db:"limit" json:"limit"`
	Offset     int32 `db:"offset" json:"offset"`
}

func (q *Queries) ListTicketsForUser(ctx context.Context, arg ListTicketsForUserParams) ([]Ticket, error) {
	rows, err := q.db.QueryContext(ctx, listTicketsForUser, arg.AssignedTo, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Ticket{}
	for rows.Next() {
		var i Ticket
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.AssignedTo,
			&i.CreatedBy,
			&i.DueDate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTicket = `-- name: UpdateTicket :one
UPDATE tickets 
SET title = $2,
    description = $3,
    assigned_to = $4,
    created_by = $5,
    due_date = $6
WHERE id = $1
RETURNING id, title, description, assigned_to, created_by, due_date, created_at
`

type UpdateTicketParams struct {
	ID          int64     `db:"id" json:"id"`
	Title       string    `db:"title" json:"title"`
	Description string    `db:"description" json:"description"`
	AssignedTo  int64     `db:"assigned_to" json:"assigned_to"`
	CreatedBy   int64     `db:"created_by" json:"created_by"`
	DueDate     time.Time `db:"due_date" json:"due_date"`
}

func (q *Queries) UpdateTicket(ctx context.Context, arg UpdateTicketParams) (Ticket, error) {
	row := q.db.QueryRowContext(ctx, updateTicket,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.AssignedTo,
		arg.CreatedBy,
		arg.DueDate,
	)
	var i Ticket
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.AssignedTo,
		&i.CreatedBy,
		&i.DueDate,
		&i.CreatedAt,
	)
	return i, err
}
